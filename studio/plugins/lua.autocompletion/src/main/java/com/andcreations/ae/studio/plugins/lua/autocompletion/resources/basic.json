{
    "vars":[
        {
            "name":"_G",
            "desc":"A global variable (not a function) that holds the global environment. Lua itself does not use this variable; changing its value does not affect any environment, nor vice-versa.",
            "definedIn":"Lua"
        },
        {
            "name":"_VERSION",
            "desc":"A global variable (not a function) that holds a string containing the current interpreter version. The current contents of this variable is <code>Lua 5.2</code>.",
            "definedIn":"Lua"
        }        
    ],
    "funcs":[
        {
            "name":"assert",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"v,message",
                    "replace":"assert",
                    "desc":"Issues an error when the value of its argument <code>v</codE> is false (i.e., <code>nil</code> or <code>false</code>); otherwise, returns all its arguments. <code>message</code> is an error message.",
                    "params":[
                        {
                            "name":"v",
                            "desc":"The value to check."
                        },
                        {
                            "name":"message",
                            "desc":"The message."
                        }
                    ]
                },
                {
                    "args":"v",
                    "replace":"assert",
                    "desc":"Issues an error when the value of its argument <code>v</codE> is false (i.e., <code>nil</code> or <code>false</code>); otherwise, returns all its arguments.",                     "params":[
                        {
                            "name":"v",
                            "desc":"The value to check."
                        }
                    ]
                }
            ]
        },        
        {
            "name":"collectgarbage",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"opt,arg",
                    "replace":"collectgarbage",
                    "desc":"This function is a generic interface to the garbage collector. It performs different functions according to its first argument, <code>opt</code>:<ul><li><code>collect</code>: performs a full garbage-collection cycle.</li><li><code>stop</code>: stops automatic execution of the garbage collector. The collector will run only when explicitly invoked, until a call to restart it.</li><li><code>restart</code>: restarts automatic execution of the garbage collector.</li><li><code>count</code>: returns the total memory in use by Lua (in Kbytes) and a second value with the total memory in bytes modulo 1024.</li><li><code>step</code>: performs a garbage-collection step. The step size is controlled by <code>arg</code> (larger values mean more steps) in a non-specified way. If you want to control the step size you must experimentally tune the value of <code>arg</code>. Returns <code>true</code> if the step finished a collection cycle.</li><li><code>setpause</code>: sets <code>arg</code> as the new value for the pause of the collector. Returns the previous value for pause.</li><li><code>setstepmul</code>: sets <code>arg</code> as the new value for the step multiplier of the collector. Returns the previous value for step.</li><li><code>isrunning</code>: returns a boolean that tells whether the collector is running (i.e., not stopped).</li><li><code>generational</code>: changes the collector to generational mode. This is an experimental feature.</li><li><code>incremental</code>: changes the collector to incremental mode. This is the default mode.",
                    "params":[
                        {
                            "name":"opt",
                            "desc":"The option."
                        },
                        {
                            "name":"arg",
                            "desc":"The option argument."
                        }
                    ]
                },
                {
                    "replace":"collectgarbage",
                    "desc":"Performs a full garbage-collection cycle."
                }
            ]
        },
        {
            "name":"dofile",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"filename",
                    "replace":"dofile",
                    "desc":"Opens the named file and executes its contents as a Lua chunk. Returns all values returned by the chunk. In case of errors, <code>dofile</code> propagates the error to its caller (that is, dofile does not run in protected mode).",
                    "params":[
                        {
                            "name":"filename",
                            "desc":"The file name."
                        }
                    ]
                },
                {
                    "replace":"dofile",
                    "desc":"Executes the contents of the standard input (stdin). Returns all values returned by the chunk. In case of errors, dofile propagates the error to its caller (that is, dofile does not run in protected mode)."
                }
            ]
        },
        {
            "name":"error",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"message,level",
                    "replace":"error",
                    "desc":"<p>Terminates the last protected function called and returns <code>message</code> as the error message. Function error never returns.</p><p>Usually, error adds some information about the error position at the beginning of the message, if the message is a string. The <code>level</code> argument specifies how to get the error position. With level 1 (the default), the error position is where the error function was called. Level 2 points the error to where the function that called error was called; and so on. Passing a level 0 avoids the addition of error position information to the message.</p>",
                    "params":[
                        {
                            "name":"message",
                            "desc":"The error message."
                        },
                        {
                            "name":"level",
                            "desc":"The error position."
                        }
                    ]
                },
                {
                    "args":"message",
                    "replace":"error",
                    "desc":"Terminates the last protected function called and returns <code>message</code> as the error message. Function error never returns.",
                    "params":[
                        {
                            "name":"message",
                            "desc":"The error message."
                        }
                    ]
                }                
            ]
        },
        {
            "name":"getmetatable",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"object",
                    "replace":"getmetatable",
                    "desc":"If <code>object</code> does not have a metatable, returns <code>nil</code>. Otherwise, if the object's metatable has a <code>__metatable</code> field, returns the associated value. Otherwise, returns the metatable of the given object.",
                    "params":[
                        {
                            "name":"object",
                            "desc":"The object."
                        }
                    ]
                }
            ]
        },
        {
            "name":"ipairs",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"t",
                    "replace":"ipairs",
                    "desc":"<p>If <code>t</code> has a metamethod <code>__ipairs</code>, calls it with <code>t</code> as argument and returns the first three results from the call.</p><p>Otherwise, returns three values: an iterator function, the table <code>t</code>, and 0, so that the construction<code>for i,v in ipairs(t) do <i>body</i> end</code> will iterate over the pairs (1,<code>t</code>[1]), (2,<code>t</code>[2]), ..., up to the first integer key absent from the table.</p>",
                    "params":[
                        {
                            "name":"t",
                            "desc":"The table."
                        }
                    ]
                }
            ]
        },
        {
            "name":"load",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"ld,source,mode,env",
                    "replace":"load",
                    "desc":"<p>Loads a chunk.</p><p>If <code>ld</code> is a string, the chunk is this string. If <code>ld</code> is a function, load calls it repeatedly to get the chunk pieces. Each call to <code>ld</code> must return a string that concatenates with previous results. A return of an empty string, <code>nil</code>, or no value signals the end of the chunk.</p><p>If there are no syntactic errors, returns the compiled chunk as a function; otherwise, returns <code>nil</code> plus the error message.</p><p> If the resulting function has upvalues, the first upvalue is set to the value of env, if that parameter is given, or to the value of the global environment. (When you load a main chunk, the resulting function will always have exactly one upvalue, the <code>_ENV</code> variable. When you load a binary chunk created from a function (see <code>string.dump</code>), the resulting function can have arbitrary upvalues.)</p><p><code>source</code> is used as the source of the chunk for error messages and debug information. When absent, it defaults to <code>ld</code>, if ld is a string, or to <code>=(load)</code> otherwise.<p></p> The string mode controls whether the chunk can be text or binary (that is, a precompiled chunk). It may be the string <code>b</code> (only binary chunks),<code>t</code> (only text chunks), or <code>bt</code> (both binary and text). The default is <code>bt</code>.</p>",
                    "params":[
                        {
                            "name":"ld",
                            "desc":"The chunk."
                        },
                        {
                            "name":"source",
                            "desc":"The source of the chunk."
                        },
                        {
                            "name":"mode",
                            "desc":"Indicates if the chunk is text or binary."
                        },
                        {
                            "name":"env",
                            "desc":"The first upvalue of the function."
                        }
                    ],
                    "return":"The compiled chunk as a function."
                },
                {
                    "args":"ld",
                    "replace":"load",
                    "desc":"<p>Loads a chunk.</p><p>If <code>ld</code> is a string, the chunk is this string. If <code>ld</code> is a function, load calls it repeatedly to get the chunk pieces. Each call to <code>ld</code> must return a string that concatenates with previous results. A return of an empty string, <code>nil</code>, or no value signals the end of the chunk.<p></p>If there are no syntactic errors, returns the compiled chunk as a function; otherwise, returns <code>nil</code> plus the error message.</p>",
                    "params":[
                        {
                            "name":"ld",
                            "desc":"The chunk."
                        }
                    ],
                    "return":"The compiled chunk as a function."
                }                
            ]
        }, 
        {
            "name":"loadfile",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"filename",
                    "replace":"loadfile",
                    "desc":"Similar to <code>load</code>, but gets the chunk from file <code>filename</code> or from the standard input, if no file name is given.",
                    "params":[
                        {
                            "name":"filename",
                            "desc":"The name of the file with chunk."
                        }
                    ],
                    "return":"The compiled chunk as a function."
                }              
            ]
        },
        {
            "name":"next",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"table,index",
                    "replace":"next",
                    "desc":"<p>Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. <code>next</code> returns the next index of the table and its associated value. When called with the last index, or with <code>nil</code> in an empty table, next returns <code>nil</code>.</p><p>In particular, you can use <code>next(t)</code> to check whether a table is empty.</p><p>The order in which the indices are enumerated is not specified, even for numeric indices. (To traverse a table in numeric order, use a numerical for.)</p><p>The behavior of next is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may clear existing fields.</p>",
                    "params":[
                        {
                            "name":"table",
                            "desc":"The table."
                        },
                        {
                            "name":"index",
                            "desc":"The index."
                        }
                    ]
                },
                {
                    "args":"table",
                    "replace":"next",
                    "desc":"Allows a program to traverse all fields of a table. Returns an initial index and its associated value.", 
                    "params":[
                        {
                            "name":"table",
                            "desc":"The table."
                        }
                    ]
                }                
            ]
        },
        {
            "name":"pairs",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"t",
                    "replace":"pairs",
                    "desc":"<p>If <code>t</code> has a metamethod <code>__pairs</code>, calls it with <code>t</code> as argument and returns the first three results from the call.</p><p>Otherwise, returns three values: the next function, the table <code>t</code>, and <code>nil</code>, so that the construction<code>for k,v in pairs(t) do <i>body</i> end</code> will iterate over all key–value pairs of table t.</p><p>See function <code>next</code> for the caveats of modifying the table during its traversal.</p>",
                    "params":[
                        {
                            "name":"t",
                            "desc":"The table."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"pcall",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"f,...",
                    "replace":"pcall",
                    "desc":"Calls function <code>f</code> with the given arguments in protected mode. This means that any error inside <code>f</code> is not propagated; instead, <code>pcall</code> catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, pcall also returns all results from the call, after this first result. In case of any error, <code>pcall</code> returns false plus the error message.",
                    "params":[
                        {
                            "name":"f",
                            "desc":"The function."
                        },
                        {
                            "name":"...",
                            "desc":"The function arguments."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"print",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"...",
                    "replace":"print",
                    "desc":"Receives any number of arguments and prints their values to stdout, using the <code>tostring</code> function to convert each argument to a string. <code>print</code> is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use <code>string.format</code>.",
                    "params":[
                        {
                            "name":"...",
                            "desc":"The values to print."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"rawequal",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"v1,v2",
                    "replace":"rawequal",
                    "desc":"Checks whether <code>v1</code> is equal to <code>v2</code>, without invoking any metamethod. Returns a boolean.",
                    "params":[
                        {
                            "name":"v1",
                            "desc":"The first value."
                        },
                        {
                            "name":"v2",
                            "desc":"The second value."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"rawget",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"table,index",
                    "replace":"rawget",
                    "desc":"Gets the real value of <code>table[index]</code>, without invoking any metamethod. <code>table</code> must be a table; <code>index</code> may be any value.",
                    "params":[
                        {
                            "name":"table",
                            "desc":"The table."
                        },
                        {
                            "name":"index",
                            "desc":"The index."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"rawlen",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"v",
                    "replace":"rawlen",
                    "desc":"Returns the length of the object <code>v</code>, which must be a table or a string, without invoking any metamethod. Returns an integer number.",
                    "params":[
                        {
                            "name":"v",
                            "desc":"The table or string."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"rawset",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"table,index,value",
                    "replace":"rawset",
                    "desc":"<p>Sets the real value of <code>table[index]</code> to <code>value</code>, without invoking any metamethod. <code>table</code> must be a table, <code>index</code> any value different from <code>nil</code> and NaN, and <code>value</code> any Lua value.</p><p>This function returns <code>table</code>.</p>",
                    "params":[
                        {
                            "name":"table",
                            "desc":"The table."
                        },
                        {
                            "name":"index",
                            "desc":"The index."
                        },
                        {
                            "name":"value",
                            "desc":"The value."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"select",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"index,...",
                    "replace":"select",
                    "desc":"If <code>index</code> is a number, returns all arguments after argument number <code>index</code>; a negative number indexes from the end (-1 is the last argument). Otherwise, <code>index</code> must be the string <code>#</code>, and select returns the total number of extra arguments it received.",
                    "params":[
                        {
                            "name":"index",
                            "desc":"The index."
                        },
                        {
                            "name":"...",
                            "desc":"The arguments."
                        }
                    ]
                }                         
            ]
        },       
        {
            "name":"setmetatable",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"table,metatable",
                    "replace":"setmetatable",
                    "desc":"<p>Sets the metatable for the given table. (You cannot change the metatable of other types from Lua, only from C.) If <code>metatable</code> is <code>nil</code>, removes the metatable of the given table. If the original metatable has a <code>__metatable</code> field, raises an error.</p><p>This function returns table.</p>",
                    "params":[
                        {
                            "name":"table",
                            "desc":"The table."
                        },
                        {
                            "name":"metatable",
                            "desc":"The metatable."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"tonumber",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"e,base",
                    "replace":"tonumber",
                    "desc":"<p><code>tonumber</code> tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then <code>tonumber</code> returns this number; otherwise, it returns <code>nil</code>.</p><p>The base may be any integer between 2 and 36, inclusive. In bases above 10, the letter 'A' (in either upper or lower case) represents 10, 'B' represents 11, and so forth, with 'Z' representing 35. If the string <code>e</code> is not a valid numeral in the given base, the function returns <code>nil</code>.</p>",
                    "params":[
                        {
                            "name":"e",
                            "desc":"The string to convert."
                        },
                        {
                            "name":"base",
                            "desc":"The base."
                        }
                    ]
                },
                {
                    "args":"e",
                    "replace":"tonumber",
                    "desc":"<p><code>tonumber</code> tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then <code>tonumber</code> returns this number; otherwise, it returns <code>nil</code>.",
                    "params":[
                        {
                            "name":"e",
                            "desc":"The string to convert."
                        }
                    ]
                }                
            ]
        },
        {
            "name":"tostring",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"v",
                    "replace":"tostring",
                    "desc":"<p>Receives a value of any type and converts it to a string in a reasonable format. (For complete control of how numbers are converted, use <code>string.format</code>).</p><p>If the metatable of <code>v</code> has a <code>__tostring</code> field, then <code>tostring</code> calls the corresponding value with <code>v</code> as argument, and uses the result of the call as its result.</p>",
                    "params":[
                        {
                            "name":"v",
                            "desc":"The value."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"type",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"v",
                    "replace":"type",
                    "desc":"Returns the type of its only argument, coded as a string. The possible results of this function are <code>nil</code> (a string, not the value nil), <code>number</code>, <code>string</code>, <code>boolean</code>, <code>table</code>, <code>function</code>, <code>thread</code>, and <code>userdata</code>.",
                    "params":[
                        {
                            "name":"v",
                            "desc":"The value."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"xpcall",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"f,msgh,...",
                    "replace":"xpcall",
                    "desc":"This function is similar to <code>pcall</code>, except that it sets a new message handler <code>msgh</code>.",
                    "params":[
                        {
                            "name":"f",
                            "desc":"The function."
                        },
                        {
                            "name":"msgh",
                            "desc":"The message handler."
                        },
                        {
                            "name":"...",
                            "desc":"The function arguments."
                        }
                    ]
                }               
            ]
        },
        {
            "name":"require",
            "definedIn":"Lua",
            "variants":[
                {
                    "args":"modname",
                    "replace":"require",
                    "desc":"<p>Loads the given module. The function starts by looking into the <code>package.loaded</code> table to determine whether modname is already loaded. If it is, then require returns the value stored at <code>package.loaded[modname]</code>. Otherwise, it tries to find a loader for the module.</p><p>To find a loader, require is guided by the <code>package.searchers</code> sequence. By changing this sequence, we can change how require looks for a module. The following explanation is based on the default configuration for <code>package.searchers</code>.</p><p>First require queries <code>package.preload[modname]</code>. If it has a value, this value (which should be a function) is the loader. Otherwise require searches for a Lua loader using the path stored in package.path. If that also fails, it searches for a C loader using the path stored in <code>package.cpath</code>. If that also fails, it tries an all-in-one loader (see <code>package.searchers</code>).</p><p>Once a loader is found, require calls the loader with two arguments: <code>modname</code> and an extra value dependent on how it got the loader. (If the loader came from a file, this extra value is the file name.) If the loader returns any non-nil value, <code>require</code> assigns the returned value to <code>package.loaded[modname]</code>. If the loader does not return a non-nil value and has not assigned any value to <code>package.loaded[modname]</code>, then require assigns <code>true</code> to this entry. In any case, require returns the final value of <code>package.loaded[modname]</code>.</p><p>If there is any error loading or running the module, or if it cannot find any loader for the module, then require raises an error.</p>",
                    "params":[
                        {
                            "name":"modname",
                            "desc":"The module name."
                        }
                    ]
                }               
            ]
        }         
    ]
}